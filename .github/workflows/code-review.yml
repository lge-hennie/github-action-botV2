name: code-review

on:
  pull_request:
    branches:
      - main  # 허용할 브랜치 이름을 여기에 추가
      - develop
    types: [opened, reopened, synchronize]
  workflow_dispatch:

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v3
      - name: Install GoogleGenerativeAI
        run: |
          npm install @google/generative-ai
      - name: Get Changed Files (Excluding CSS)
        id: changed_files
        run: |
          # 변경된 파일 목록을 필터링하여 CSS 파일을 제외
            FILES=$(echo ${{ github.event.pull_request.files }} | jq -r '.[].filename' | grep -E '\.(ts|tsx)$')
            echo "::set-output name=files::$FILES"
      - name: Generate Git Diff for Non-CSS Files
        run: |
                git fetch origin "${{ github.event.pull_request.base.ref }}"
                git fetch origin "${{ github.event.pull_request.head.ref }}"
          
                # 변경된 파일들에 대한 diff 생성
                for FILE in ${{ steps.changed_files.outputs.files }}; do
                  git diff --unified=0 "origin/${{ github.event.pull_request.base.ref }}" "$FILE" >> "diff.txt"
                done
          
                # 만약 diff 파일이 비어있다면 경고 메시지 출력
                if [ ! -s diff.txt ]; then
                  echo "No non-CSS files to review."
                  exit 1
                fi
      - name: Run Gemini-1.5-flash
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const diff_output = fs.readFileSync("diff.txt",'utf8');
            console.log('diff:',diff_output)
            
            const { GoogleGenerativeAI } = require("@google/generative-ai");
            const genAI = new GoogleGenerativeAI("${{ secrets.GEMINI_API_KEY }}");
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash"});
            
            const prompt = `You are a senior software engineer and need to perform a code review based on the results of a given git diff. Review the changed code from different perspectives and let us know if there are any changes that need to be made. If you see any code that needs to be fixed in the result of the git diff, you need to calculate the exact line number by referring to the “@@ -0,0 +0,0 @@” part. The output format is \[{“path”:“{ filepath }”, “line”: { line }, “text”: { review comment }, “side”: “RIGHT"}\] format must be respected.\n<git diff>${diff_output}</git diff>`;
            const result = await model.generateContent(prompt);
            const response = await result.response;
            const text = response.text();
            console.log(text)
            
            fs.writeFileSync('res.txt',text);
            console.log('Save Results!')
      - name: output
        id: store
        run: |
          COMMENT=$(sed '/^```/d' res.txt | jq -c .)
          echo "comment=$COMMENT" >> $GITHUB_OUTPUT
          echo $((${{ steps.store.outputs.comment }}))
      - name: Add Pull Request Review Comment
        uses: nbaztec/add-pr-review-comment@v1.0.7
        with:
          comments: ${{ steps.store.outputs.comment }}
          repo-token: ${{ secrets.GH_TOKEN }}
          repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
          allow-repeats: false # This is the default
